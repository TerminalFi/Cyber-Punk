{
    "name": "Cyber Punk",
    "author": "Terminal (TheSecEng)",
    "variables": {
        "accent": "#80CBC4",
        "foreground": "#07f79a",
        "background": "#0a1933",
        "cursor": "#f6ff00",
        "comments": "#9604ff",
        "deprecated": "#b4651d",
        "diffAdded": "#f6ff00",
        "diffDeleted": "#fe0302",
        "diffModified": "#6f1d8e",
        "invalid": "#fe0302",
        "black": "#000000",
        "blue": "#05abff",
        "brown": "#b4651d",
        "cyan": "#03fefe",
        "green": "#00ff33",
        "orange": "#ffaa01",
        "pink": "#ff036d",
        "purple": "#9604ff",
        "red": "#fe0302",
        "violet": "#6f1d8e",
        "white": "#FFFFFF",
        "yellow": "#f6ff00"
    },
    "globals": {
        "accent": "var(accent)",
        "active_guide": "var(cyan)",
        "background": "var(background)",
        "block_caret": "var(cursor)",
        "bracket_contents_foreground": "var(yellow)",
        "bracket_contents_options": "underline",
        "brackets_foreground": "var(cyan)",
        "brackets_options": "underline",
        "caret": "var(cursor)",
        "find_highlight": "var(yellow)",
        "find_highlight_foreground": "var(background)",
        "fold_marker": "var(yellow)",
        "foreground": "var(foreground)",
        "gutter": "var(background)",
        "gutter_foreground": "color(var(foreground) alpha(0.2))",
        "highlight": "var(yellow)",
        "inactive_selection": "color(var(cyan) alpha(0.1))",
        "inactive_selection_border": "color(var(cyan) alpha(0.1))",
        "invisibles": "color(var(foreground) alpha(0.3))",
        "line_diff_added": "var(diffAdded)",
        "line_diff_deleted": "var(diffDeleted)",
        "line_diff_modified": "var(diffModified)",
        "line_diff_width": "3",
        "line_highlight": "color(var(foreground) alpha(0.1))",
        "misspelling": "var(blue)",
        "selection": "color(var(foreground) alpha(0.10))",
        "selection_border": "var(cyan)",
        "selection_corner_radius": "cut",
        "selection_corner_style": "cut",
        "shadow": "color(var(background) alpha(0.5))",
        "stack_guide": "var(brown)",
        "tags_foreground": "var(cyan)",
        "tags_options": "underline"
    },
    "rules": [
        {
            "name": "COMMENTS - Single and multi-line comments should use, respectively",
            "scope": "comment,comment.line,comment.block",
            "foreground": "var(comments)",
            "font_style": "glow italic"
        },
        {
            "name": "COMMENTS - Multi-line comments used as documentation, such as Javadoc or PhpDo",
            "scope": "comment.block.documentation",
            "foreground": "var(comments)",
            "font_style": "glow italic"
        },
        {
            "name": "COMMENTS - Symbols that delineate a comment, e.g. // or /*",
            "scope": "punctuation.definition.comment",
            "foreground": "var(comments)",
            "font_style": "glow italic"
        },
        {
            "name": "COMMENTS - Special syntax that denote a section of code",
            "scope": "meta.toc-list",
            "foreground": "var(comments)",
            "font_style": "glow italic"
        },
        {
            "name": "CONSTANT - Numeric literals, including integers, floats, etc...",
            "scope": "constant.numeric,constant.numeric.integer,constant.numeric.integer.binary,constant.numeric.integer.octal,constant.numeric.integer.decimal,constant.numeric.integer.hexadecimal,constant.numeric.integer.other,constant.numeric.float,constant.numeric.float.binary,constant.numeric.float.octal,constant.numeric.float.decimal,constant.numeric.float.hexadecimal,constant.numeric.float.other,constant.numeric.complex,constant.numeric.complex.real,constant.numeric.complex.imaginary",
            "foreground": "var(orange)",
            "font_style": "glow"
        },
        {
            "name": "CONSTANT - Constants that are built into the language, such as booleans and null values",
            "scope": "constant.language",
            "foreground": "var(cyan)",
            "font_style": "glow"
        },
        {
            "name": "CONSTANT - Character escapes in strings",
            "scope": "constant.character.escape",
            "foreground": "var(yellow)",
            "font_style": "glow"
        },
        {
            "name": "CONSTANT - Formatting placeholders, such as those used for sprintf(), e.g. %s",
            "scope": "constant.other.placeholder",
            "foreground": "var(yellow)",
            "font_style": "glow"
        },
        {
            "name": "CONSTANT - Other language-specific constant values",
            "scope": "constant.other",
            "foreground": "var(cyan)",
            "font_style": "glow"
        },
        {
            "name": "CONSTANT - Other language-specific constant values",
            "scope": "constant.other.color",
            "foreground": "var(pink)",
            "font_style": "glow"
        },
        {
            "name": "Message Error",
            "scope": "message.error",
            "background": "var(red)",
            "font_style": "glow"
        },
        {
            "name": "DIFF - Deleted",
            "scope": "diff.deleted",
            "background": "color(var(diffDeleted) alpha(0.20))",
            "font_style": "glow"
        },
        {
            "name": "DIFF - Deleted Char",
            "scope": "diff.deleted.char",
            "background": "color(var(diffDeleted) alpha(0.20))",
            "font_style": "glow"
        },
        {
            "name": "DIFF - Inserted",
            "scope": "diff.inserted",
            "background": "color(var(diffAdded) alpha(0.20))",
            "font_style": "glow"
        },
        {
            "name": "DIFF - Inserted Char",
            "scope": "diff.inserted.char",
            "background": "color(var(diffAdded) alpha(0.20))",
            "font_style": "glow"
        },
        {
            "name": "ENTITY - The names of data structures",
            "scope": "entity.name.class,entity.name.struct,entity.name.enum,entity.name.union,entity.name.trait,entity.name.interface,entity.name.impl,entity.name.type",
            "foreground": "var(yellow)",
            "font_style": "glow"
        },
        {
            "name": "ENTITY - Forward-decl variants of the above are used in languages such as C and C++.",
            "scope": "entity.name.class.forward-decl",
            "foreground": "var(yellow)",
            "font_style": "glow"
        },
        {
            "name": "ENTITY - Class, interface and trait names listed as an inherited class or implemented interface/trait",
            "scope": "entity.other.inherited-class",
            "foreground": "var(orange)",
            "font_style": "glow"
        },
        {
            "name": "ENTITY - Function names receive one of the following scopes",
            "scope": "entity.name.function,entity.name.function.constructor,entity.name.function.destructor",
            "foreground": "var(blue)",
            "font_style": "glow"
        },
        {
            "name": "ENTITY - Namespaces, packages and modules use the following scope",
            "scope": "entity.name.namespace",
            "foreground": "var(yellow)",
            "font_style": "glow"
        },
        {
            "name": "ENTITY - This scope is often included in the symbol list and index",
            "scope": "entity.name.constant",
            "foreground": "var(orange)",
            "font_style": "glow"
        },
        {
            "name": "ENTITY - Labels for goto-like constructs",
            "scope": "entity.name.label",
            "foreground": "var(cyan)",
            "font_style": "glow"
        },
        {
            "name": "ENTITY - Heading names in markup languages, such as Markdown and Textile",
            "scope": "entity.name.section",
            "foreground": "var(purple)",
            "font_style": "glow"
        },
        {
            "name": "ENTITY - HTML and XML tags",
            "scope": "entity.name.tag",
            "foreground": "var(red)",
            "font_style": "glow"
        },
        {
            "name": "ENTITY - HTML, CSS and XML",
            "scope": "entity.other.attribute-name",
            "foreground": "var(yellow)",
            "font_style": "glow"
        },
        {
            "name": "INVALID - Elements that are illegal in a specific context",
            "scope": "invalid.illegal",
            "foreground": "var(invalid)",
            "font_style": "glow"
        },
        {
            "name": "INVALID - Deprecated elements",
            "scope": "invalid.deprecated",
            "foreground": "var(deprecated)",
            "font_style": "glow"
        },
        {
            "name": "KEYWORD- Control keywords examples include if, try, end and while. Some syntaxes prefer to mark if and else with the conditional variant.",
            "scope": "keyword.control,keyword.control.conditional,keyword.control.import",
            "foreground": "var(cyan)",
            "font_style": "glow"
        },
        {
            "name": "KEYWORD - Keywords that contain punctuation, such as the @ symbol in CSS",
            "scope": "punctuation.definition.keyword",
            "foreground": "var(cyan)",
            "font_style": "glow"
        },
        {
            "name": "KEYWORD - All remaining non-operator keywords fall under the other",
            "scope": "keyword.other",
            "foreground": "var(orange)",
            "font_style": "glow"
        },
        {
            "name": "KEYWORD - Operators are typically symbols, so the term keyword can seem somewhat contradictory.",
            "scope": "keyword.operator,keyword.operator.arithmetic,keyword.operator.bitwise,keyword.operator.logical",
            "foreground": "var(cyan)",
            "font_style": "glow"
        },
        {
            "name": "KEYWORD - When the operator is a word, such as and, or or not, the following variant is used",
            "scope": "keyword.operator.word",
            "foreground": "var(cyan)",
            "font_style": "glow"
        },
        {
            "name": "KEYWORD - Operator comparison and assignment ",
            "scope": "keyword.operator.assignment,keyword.operator.comparison",
            "foreground": "var(cyan)",
            "font_style": "glow"
        },
        {
            "name": "MARKUP - Section headings",
            "scope": "markup.heading",
            "foreground": "var(cyan)",
            "font_style": "glow"
        },
        {
            "name": "MARKUP - Lists",
            "scope": "markup.list.unnumbered,markup.list.numbered",
            "foreground": "var(cyan)",
            "font_style": "glow"
        },
        {
            "name": "MARKUP - Bold",
            "scope": "markup.bold",
            "font_style": "glow bold",
            "foreground": "var(red)"
        },
        {
            "name": "MARKUP - Italic",
            "scope": "markup.italic",
            "font_style": "glow italic",
            "foreground": "var(red)"
        },
        {
            "name": "MARKUP - Underline",
            "scope": "markup.underline",
            "font_style": "glow underline",
            "foreground": "var(purple)"
        },
        {
            "name": "MARKUP - Underline Link",
            "scope": "markup.underline.link",
            "font_style": "glow italic underline",
            "foreground": "var(red)"
        },
        {
            "name": "MARKUP - Deleted",
            "scope": "markup.deleted",
            "foreground": "var(red)",
            "font_style": "glow"
        },
        {
            "name": "MARKUP - Inserted",
            "scope": "markup.inserted",
            "foreground": "var(green)",
            "font_style": "glow"
        },
        {
            "name": "MARKUP - Changed",
            "scope": "markup.changed",
            "foreground": "var(orange)",
            "font_style": "glow"
        },
        {
            "name": "MARKUP - Blockquotes and other quote styles",
            "scope": "markup.quote",
            "font_style": "glow italic",
            "foreground": "var(cyan)"
        },
        {
            "name": "MARKUP - Inline and block literal quoting",
            "scope": "markup.raw.inline,markup.raw.block",
            "background": "color(var(blue) alpha(0.05))",
            "font_style": "glow"
        },
        {
            "name": "MARKUP - Inline and block literal quoting",
            "scope": "meta.code-fence.definition.begin.text.markdown-gfm,meta.code-fence.definition.end.text.markdown-gfm,markup.raw.code-fence.markdown-gfm",
            "background": "color(var(blue) alpha(0.05))",
            "font_style": "glow"
        },
        {
            "name": "MARKUP - Other markup, including constructs such as footnotes and tables",
            "scope": "markup.other",
            "foreground": "var(yellow)",
            "font_style": "glow"
        },
        {
            "name": "MARKUP - Blockquote definition",
            "scope": "punctuation.definition.blockquote",
            "foreground": "var(pink)",
            "font_style": "glow"
        },
        {
            "name": "MARKUP - Blockquote definition",
            "scope": "meta.link.inline.description",
            "foreground": "var(green)",
            "font_style": "glow"
        },
        {
            "name": "META - HTML and XML tags, including punctuation, names and attributes",
            "scope": "meta.tag",
            "foreground": "var(foreground)",
            "font_style": "glow"
        },
        {
            "name": "META - The complete contents of data structures",
            "scope": "meta.class,meta.struct,meta.enum,meta.union,meta.trait,meta.interface,meta.impl,meta.type",
            "foreground": "var(purple)",
            "font_style": "glow"
        },
        {
            "name": "META - The entire scope of a function",
            "scope": "meta.function,meta.function.parameters,meta.function.return-type",
            "foreground": "var(purple)",
            "font_style": "glow"
        },
        {
            "name": "META - The entirety of a namespace",
            "scope": "meta.namespace",
            "foreground": "var(blue)",
            "font_style": "glow"
        },
        {
            "name": "META - Preprocessor statements in language such as C",
            "scope": "meta.preprocessor",
            "foreground": "var(cyan)",
            "font_style": "glow"
        },
        {
            "name": "META - Annotations, attributes and decorator statements that are used to modify the behavior or implementation of a class, method or function",
            "scope": "meta.annotation,meta.annotation.identifier,meta.annotation.parameters,punctuation.definition.annotation",
            "foreground": "var(green)",
            "font_style": "glow"
        },
        {
            "name": "META - Complete identifiers, including namespace names",
            "scope": "meta.path",
            "foreground": "var(cyan)",
            "font_style": "glow"
        },
        {
            "name": "META - Function names, including the full path, and all parameters",
            "scope": "meta.function-call",
            "foreground": "var(yellow)",
            "font_style": "glow"
        },
        {
            "name": "Meta - Mapping Key",
            "scope": "meta.mapping.key",
            "foreground": "var(blue)",
            "font_style": "glow"
        },
        {
            "name": "META - Sections of code delineated by curly braces",
            "scope": "meta.block,punctuation.section.block.begin,punctuation.section.block.end,meta.braces,punctuation.section.braces.begin,punctuation.section.braces.end",
            "foreground": "var(cyan)",
            "font_style": "glow"
        },
        {
            "name": "META - Sections of code delineated by round braces",
            "scope": "meta.brace.round",
            "foreground": "var(orange)",
            "font_style": "glow"
        },
        {
            "name": "META - Sections of code delineated by parentheses",
            "scope": "meta.group,punctuation.section.group.begin,punctuation.section.group.end,meta.parens,punctuation.section.parens.begin,punctuation.section.parens.end",
            "foreground": "var(cyan)",
            "font_style": "glow"
        },
        {
            "name": "META - Sections of code delineated by square brackets",
            "scope": "meta.brackets,punctuation.section.brackets.begin,punctuation.section.brackets.end,meta.array.literal,meta.brace.square",
            "foreground": "var(cyan)",
            "font_style": "glow"
        },
        {
            "name": "META - Generic data type constructs",
            "scope": "meta.generic,punctuation.definition.generic.begin,punctuation.definition.generic.end",
            "foreground": "var(cyan)",
            "font_style": "glow"
        },
        {
            "name": "META - Paragraphs in markup",
            "scope": "meta.paragraph",
            "foreground": "var(foreground)",
            "font_style": "glow"
        },
        {
            "name": "META - Object",
            "scope": "meta.objectliteral,meta.object.member",
            "foreground": "var(blue)",
            "font_style": "glow"
        },
        {
            "name": "META - Object",
            "scope": "meta.field.declaration",
            "foreground": "var(blue)",
            "font_style": "glow"
        },
        {
            "name": "META - Diff Header",
            "scope": "meta.diff, meta.diff.header",
            "foreground": "var(pink)",
            "font_style": "glow"
        },
        {
            "name": "PUNCTUATION - Separators such as commas",
            "scope": "punctuation.separator",
            "foreground": "var(cyan)",
            "font_style": "glow"
        },
        {
            "name": "PUNCTUATION - Semicolons or other statement terminators",
            "scope": "punctuation.terminator",
            "foreground": "var(cyan)",
            "font_style": "glow"
        },
        {
            "name": "PUNCTUATION - Parameters eg: ()",
            "scope": "punctuation.definition.group.begin,punctuation.definition.group.end,punctuation.section.inheritance.begin,punctuation.section.inheritance.end,punctuation.section.arguments.begin,punctuation.section.arguments.end,punctuation.definition.parameters.begin,punctuation.definition.parameters.end,punctuation.definition.block,punctuation.definition.metadata.begin,punctuation.definition.metadata.end,meta.group.braces.round.function.arguments",
            "foreground": "var(cyan)",
            "font_style": "glow"
        },
        {
            "name": "PUNCTUATION - Embedded eg: {}",
            "scope": "punctuation.section.embedded.begin,punctuation.section.embedded.end,meta.interpolation punctuation.section.interpolation.begin,meta.interpolation punctuation.section.interpolation.end",
            "foreground": "var(cyan)",
            "font_style": "glow"
        },
        {
            "name": "PUNCTUATION - Parameters eg: <>",
            "scope": "punctuation.definition.tag.begin,punctuation.definition.tag.end,punctuation.definition.reference.email.end.git,punctuation.definition.reference.email.begin.git",
            "foreground": "var(cyan)",
            "font_style": "glow"
        },
        {
            "name": "PUNCTUATION - Parameters eg: []",
            "scope": "punctuation.section.sequence.begin,punctuation.section.sequence.end,punctuation.definition.link.begin,punctuation.definition.link.end,punctuation.definition.image.begin,punctuation.definition.image.end",
            "foreground": "var(cyan)",
            "font_style": "glow"
        },
        {
            "name": "PUNCTUATION - Line-continuation characters, such as in Python and R",
            "scope": "punctuation.separator.continuation",
            "foreground": "var(cyan)",
            "font_style": "glow"
        },
        {
            "name": "PUNCTUATION - Member access, scope resolution, or similar constructs",
            "scope": "punctuation.accessor",
            "foreground": "var(cyan)",
            "font_style": "glow"
        },
        {
            "name": "PUNCTUATION - Property list, such CSS in HTML",
            "scope": "punctuation.section.property-list",
            "foreground": "var(cyan)",
            "font_style": "glow"
        },
        {
            "name": "PUNCTUATION - Section mapping, such as JSON, eg: \"{}\"",
            "scope": "punctuation.section.mapping.begin,punctuation.section.mapping.end",
            "foreground": "var(cyan)",
            "font_style": "glow"
        },
        {
            "name": "SOURCE - A language-specific variant of the following scope is typically applied to the entirety of a source code file",
            "scope": "source",
            "foreground": "var(green)",
            "font_style": "glow"
        },
        {
            "name": "STORAGE - Types should use the following scope. Examples include int, bool and char",
            "scope": "storage.type",
            "foreground": "var(purple)",
            "font_style": "glow"
        },
        {
            "name": "STORAGE - Keywords that affect the storage of a variable, function or data structure should use the following scope. Examples include static, inline, const, public and private",
            "scope": "storage.modifier",
            "foreground": "var(purple)",
            "font_style": "glow"
        },
        {
            "name": "STORAGE - Keywords for functions or methods",
            "scope": "storage.type.function keyword.declaration.function",
            "foreground": "var(pink)",
            "font_style": "glow"
        },
        {
            "name": "STORAGE - Keywords for classes, structs, interfaces",
            "scope": "storage.type.class keyword.declaration.class,storage.type.struct keyword.declaration.struct,storage.type.enum keyword.declaration.enum,storage.type.union keyword.declaration.union,storage.type.trait keyword.declaration.trait,storage.type.interface keyword.declaration.interface,storage.type.impl keyword.declaration.impl,storage.type keyword.declaration.type",
            "foreground": "var(purple)",
            "font_style": "glow"
        },
        {
            "name": "STRING - Basic strings use the one",
            "scope": "string.quoted.single,string.quoted.double,string.quoted.triple",
            "foreground": "var(green)",
            "font_style": "glow"
        },
        {
            "name": "STRING - Strings that used unconventional quotes, such as < and > with C imports",
            "scope": "string.quoted.other",
            "foreground": "var(cyan)",
            "font_style": "glow"
        },
        {
            "name": "STRING - The entirety of a string, along with all punctuation, prefixes, suffixes and interpolations",
            "scope": "meta.string",
            "foreground": "var(cyan)",
            "font_style": "glow"
        },
        {
            "name": "STRING - Punctuation at the beginning and end of strings",
            "scope": "punctuation.definition.string.begin,punctuation.definition.string.end",
            "foreground": "var(cyan)",
            "font_style": "glow"
        },
        {
            "name": "STRING - Unquoted strings, such as in Shell and Batch File",
            "scope": "string.unquoted",
            "foreground": "var(yellow)",
            "font_style": "glow"
        },
        {
            "name": "STRING - Regular expression literal",
            "scope": "string.regexp",
            "foreground": "var(yellow)",
            "font_style": "glow"
        },
        {
            "name": "STRING - When a string contain interpolated code",
            "scope": "meta.interpolation",
            "foreground": "var(yellow)",
            "font_style": "glow"
        },
        {
            "name": "STRING - The punctuation for an interpolated expression",
            "scope": "punctuation.section.interpolation.begin,punctuation.section.interpolation.end",
            "foreground": "var(yellow)",
            "font_style": "glow"
        },
        {
            "name": "STRING - Between the punctuation, the interpolated expression",
            "scope": "source.language-suffix.embedded",
            "foreground": "var(yellow)",
            "font_style": "glow"
        },
        {
            "name": "SUPPORT - Elements provided by a base frameworks",
            "scope": "support.constant,support.function,support.module",
            "foreground": "var(pink)",
            "font_style": "glow"
        },
        {
            "name": "SUPPORT - While also used for base frameworks, many syntaxes apply these to scopes unrecognized classes and types, effectively scoping all user constructs.",
            "scope": "support.type,support.class,support.variable.property",
            "foreground": "var(foreground)",
            "font_style": "glow"
        },
        {
            "name": "SUPPORT - Class Component",
            "scope": "support.class.component",
            "foreground": "var(purple)",
            "font_style": "glow"
        },
        {
            "name": "SUPPORT - Type Primitive",
            "scope": "support.type.primitive",
            "foreground": "var(yellow)",
            "font_style": "glow"
        },
        {
            "name": "TEXT - HTML",
            "scope": "text.html",
            "foreground": "var(foreground)",
            "font_style": "glow"
        },
        {
            "name": "TEXT - XML",
            "scope": "text.xml",
            "foreground": "var(foreground)",
            "font_style": "glow"
        },
        {
            "name": "VARIABLE - Declaration",
            "scope": "variable.declaration,variable.other",
            "foreground": "var(brown)",
            "font_style": "glow"
        },
        {
            "name": "VARIABLE - A generic variable",
            "scope": "variable.other.readwrite",
            "foreground": "var(foreground)",
            "font_style": "glow"
        },
        {
            "name": "VARIABLE - Symbols that are part of the variable name",
            "scope": "punctuation.definition.variable",
            "foreground": "var(cyan)",
            "font_style": "glow"
        },
        {
            "name": "VARIABLE - Immutable variables",
            "scope": "variable.other.constant",
            "foreground": "var(red)",
            "font_style": "glow"
        },
        {
            "name": "VARIABLE - Reserved variable names that are specified by the language, such as this, self, super",
            "scope": "variable.language",
            "foreground": "var(red)",
            "font_style": "glow"
        },
        {
            "name": "VARIABLE - Parameters to a function or methods",
            "scope": "variable.parameter",
            "foreground": "var(red)",
            "font_style": "glow"
        },
        {
            "name": "VARIABLE - Fields, properties, members and attributes of a class",
            "scope": "variable.other.member",
            "foreground": "var(yellow)",
            "font_style": "glow"
        },
        {
            "name": "VARIABLE - Function and method name",
            "scope": "variable.function",
            "foreground": "var(blue)",
            "font_style": "glow"
        },
        {
            "name": "VARIABLE - The final label in an identifier that is part of an annotation",
            "scope": "variable.annotation",
            "foreground": "var(yellow)",
            "font_style": "glow"
        },
        {
            "name": "CSS - Attribute name ID",
            "scope": "entity.other.attribute-name.id",
            "foreground": "var(orange)",
            "font_style": "glow"
        },
        {
            "name": "CSS - Attribute name Class",
            "scope": "entity.other.attribute-name.class",
            "foreground": "var(yellow)",
            "font_style": "glow"
        },
        {
            "name": "CSS - Pseudo class",
            "scope": "entity.other.pseudo-class",
            "foreground": "var(purple)",
            "font_style": "glow"
        },
        {
            "name": "CSS - Pseudo element",
            "scope": "entity.other.pseudo-element",
            "foreground": "var(purple)",
            "font_style": "glow"
        },
        {
            "name": "HTML - Attribute name ID",
            "scope": "meta.attribute-with-value.id. entity.other.attribute-name.id",
            "foreground": "var(purple)",
            "font_style": "glow"
        },
        {
            "name": "HTML - Attribute name ID",
            "scope": "meta.attribute-with-value.id. string.quoted.double. meta.toc-list.id.",
            "foreground": "var(green)",
            "font_style": "glow normal"
        },
        {
            "name": "GIT - Text",
            "scope": "text.git.commit meta.subject.git.commit markup.heading.subject.git.commit",
            "foreground": "var(foreground)",
            "font_style": "glow"
        },
        {
            "name": "GIT - Author username",
            "scope": "text.git.commit meta.reference.username.git entity.name.reference.username.git",
            "font_style": "glow italic",
            "foreground": "var(cyan)"
        },
        {
            "name": "GIT - Author email",
            "scope": "text.git.commit entity.name.reference.email.git",
            "font_style": "glow italic",
            "foreground": "var(blue)"
        },
        {
            "name": "GIT - Comment Timestamp",
            "scope": "text.git.commit comment.line.git.commit constant.language.timestamp.git.commit",
            "foreground": "var(yellow)",
            "font_style": "glow"
        },
        {
            "name": "GIT - Reference number",
            "scope": "text.git.commit meta.reference.issue.git constant.other.reference.issue.git",
            "font_style": "glow bold",
            "foreground": "var(purple)"
        },
        {
            "name": "GIT - Hash number",
            "scope": "text.git.commit meta.message.git.commit constant.other.hash.git.commit",
            "font_style": "glow bold",
            "foreground": "var(green)"
        },
        {
            "name": "GIT - Resolved issue",
            "scope": "text.git.commit keyword.other.resolved-issue.git",
            "foreground": "var(red)",
            "font_style": "glow"
        },
        {
            "name": "JS - Console, \"console\"",
            "scope": "support.type.object.console,support.class.console",
            "foreground": "var(yellow)",
            "font_style": "glow"
        },
        {
            "name": "JS - Console, \"log\"",
            "scope": "support.function.console",
            "foreground": "var(blue)",
            "font_style": "glow"
        },
        {
            "name": "JS - Other property",
            "scope": "source.js variable.other.property.js",
            "foreground": "var(blue)",
            "font_style": "glow"
        },
        {
            "name": "JSON - Key ",
            "scope": "meta.mapping.key.json string.quoted.double.json",
            "foreground": "var(purple)",
            "font_style": "glow"
        },
        {
            "name": "JSON - Mapping Level 1",
            "scope": "source.json meta.mapping.value.json meta.mapping.key.json string.quoted.double.json",
            "foreground": "var(yellow)",
            "font_style": "glow"
        },
        {
            "name": "JSON - Mapping Level 2",
            "scope": "source.json meta.mapping.value.json meta.mapping.value.json meta.mapping.key.json string.quoted.double.json",
            "foreground": "var(orange)",
            "font_style": "glow"
        },
        {
            "name": "JSX - Meta",
            "scope": "meta.jsx.js",
            "foreground": "var(foreground)",
            "font_style": "glow"
        },
        {
            "name": "JSX - String Quoted",
            "scope": "string.quoted.jsx",
            "foreground": "var(green)",
            "font_style": "glow"
        },
        {
            "name": "PYTHON - Keyword declaration function",
            "scope": "source.python keyword.declaration.function.python",
            "foreground": "var(purple)",
            "font_style": "glow"
        },
        {
            "name": "PYTHON - Function magic",
            "scope": "source.python support.function.magic.python",
            "foreground": "var(blue)",
            "font_style": "glow"
        },
        {
            "name": "PYTHON - Function",
            "scope": "source.python meta.function.python,source.python meta.qualified-name.python support.type.python",
            "foreground": "var(blue)",
            "font_style": "glow"
        },
        {
            "name": "PYTHON - Qualified name",
            "scope": "source.python meta.qualified-name.python",
            "foreground": "var(foreground)",
            "font_style": "glow"
        },
        {
            "name": "PYTHON - Generic name",
            "scope": "source.python variable.function.python meta.generic-name.python",
            "foreground": "var(blue)",
            "font_style": "glow"
        },
        {
            "name": "VUE - Console, \"console\"",
            "scope": "text.html.vue meta.property.object",
            "foreground": "var(foreground)",
            "font_style": "glow"
        },
        {
            "name": "PYTHON - Parameters Annotation ",
            "scope": "source.python meta.function.parameters.annotation.python meta.qualified-name.python meta.generic-name.python",
            "foreground": "var(blue)",
            "font_style": "glow"
        },
        {
            "name": "ENTITY - Filenames",
            "scope": "entity.name.filename",
            "foreground": "var(green)",
            "font_style": "glow"
        }
    ]
}